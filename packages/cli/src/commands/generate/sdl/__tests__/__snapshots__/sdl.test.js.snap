// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`in javascript mode creates a multi word sdl file 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @skipAuth @skipAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }
\`
"
`;

exports[`in javascript mode creates a multi word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @skipAuth
    userProfile(id: Int!): UserProfile @skipAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }

  type Mutation {
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @skipAuth
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @skipAuth
    deleteUserProfile(id: Int!): UserProfile! @skipAuth
  }
\`
"
`;

exports[`in javascript mode creates a sdl file with enum definitions 1`] = `
"export const schema = gql\`
  type Shoe {
    id: Int!
    color: Color!
  }

  enum Color {
    RED
    GREEN
    BLUE
  }

  type Query {
    shoes: [Shoe!]! @skipAuth
    shoe(id: Int!): Shoe @skipAuth
  }

  input CreateShoeInput {
    color: Color!
  }

  input UpdateShoeInput {
    color: Color
  }

  type Mutation {
    createShoe(input: CreateShoeInput!): Shoe! @skipAuth
    updateShoe(id: Int!, input: UpdateShoeInput!): Shoe! @skipAuth
    deleteShoe(id: Int!): Shoe! @skipAuth
  }
\`
"
`;

exports[`in javascript mode creates a sdl file with json definitions 1`] = `
"export const schema = gql\`
  type Photo {
    id: Int!
    name: String!
    metadata: JSON!
  }

  type Query {
    photos: [Photo!]! @skipAuth
    photo(id: Int!): Photo @skipAuth
  }

  input CreatePhotoInput {
    name: String!
    metadata: JSON!
  }

  input UpdatePhotoInput {
    name: String
    metadata: JSON
  }

  type Mutation {
    createPhoto(input: CreatePhotoInput!): Photo! @skipAuth
    updatePhoto(id: Int!, input: UpdatePhotoInput!): Photo! @skipAuth
    deletePhoto(id: Int!): Photo! @skipAuth
  }
\`
"
`;

exports[`in javascript mode creates a single word sdl file 1`] = `
"export const schema = gql\`
  type User {
    id: Int!
    name: String
    email: String!
    isAdmin: Boolean!
    profiles: [UserProfile]!
  }

  type Query {
    users: [User!]! @skipAuth @skipAuth
  }

  input CreateUserInput {
    name: String
    email: String!
    isAdmin: Boolean!
  }

  input UpdateUserInput {
    name: String
    email: String
    isAdmin: Boolean
  }
\`
"
`;

exports[`in javascript mode creates a single word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type Post {
    id: Int!
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  type Query {
    posts: [Post!]! @skipAuth
    post(id: Int!): Post @skipAuth
  }

  input CreatePostInput {
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  input UpdatePostInput {
    title: String
    slug: String
    author: String
    body: String
    image: String
    postedAt: DateTime
  }

  type Mutation {
    createPost(input: CreatePostInput!): Post! @skipAuth
    updatePost(id: Int!, input: UpdatePostInput!): Post! @skipAuth
    deletePost(id: Int!): Post! @skipAuth
  }
\`
"
`;

exports[`in typescript mode creates a multi word sdl file 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @skipAuth @skipAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }
\`
"
`;

exports[`in typescript mode creates a multi word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type UserProfile {
    id: Int!
    username: String!
    userId: Int!
    user: User!
  }

  type Query {
    userProfiles: [UserProfile!]! @skipAuth
    userProfile(id: Int!): UserProfile @skipAuth
  }

  input CreateUserProfileInput {
    username: String!
    userId: Int!
  }

  input UpdateUserProfileInput {
    username: String
    userId: Int
  }

  type Mutation {
    createUserProfile(input: CreateUserProfileInput!): UserProfile! @skipAuth
    updateUserProfile(id: Int!, input: UpdateUserProfileInput!): UserProfile!
      @skipAuth
    deleteUserProfile(id: Int!): UserProfile! @skipAuth
  }
\`
"
`;

exports[`in typescript mode creates a sdl file with enum definitions 1`] = `
"export const schema = gql\`
  type Shoe {
    id: Int!
    color: Color!
  }

  enum Color {
    RED
    GREEN
    BLUE
  }

  type Query {
    shoes: [Shoe!]! @skipAuth
    shoe(id: Int!): Shoe @skipAuth
  }

  input CreateShoeInput {
    color: Color!
  }

  input UpdateShoeInput {
    color: Color
  }

  type Mutation {
    createShoe(input: CreateShoeInput!): Shoe! @skipAuth
    updateShoe(id: Int!, input: UpdateShoeInput!): Shoe! @skipAuth
    deleteShoe(id: Int!): Shoe! @skipAuth
  }
\`
"
`;

exports[`in typescript mode creates a sdl file with json definitions 1`] = `
"export const schema = gql\`
  type Photo {
    id: Int!
    name: String!
    metadata: JSON!
  }

  type Query {
    photos: [Photo!]! @skipAuth
    photo(id: Int!): Photo @skipAuth
  }

  input CreatePhotoInput {
    name: String!
    metadata: JSON!
  }

  input UpdatePhotoInput {
    name: String
    metadata: JSON
  }

  type Mutation {
    createPhoto(input: CreatePhotoInput!): Photo! @skipAuth
    updatePhoto(id: Int!, input: UpdatePhotoInput!): Photo! @skipAuth
    deletePhoto(id: Int!): Photo! @skipAuth
  }
\`
"
`;

exports[`in typescript mode creates a single word sdl file 1`] = `
"export const schema = gql\`
  type User {
    id: Int!
    name: String
    email: String!
    isAdmin: Boolean!
    profiles: [UserProfile]!
  }

  type Query {
    users: [User!]! @skipAuth @skipAuth
  }

  input CreateUserInput {
    name: String
    email: String!
    isAdmin: Boolean!
  }

  input UpdateUserInput {
    name: String
    email: String
    isAdmin: Boolean
  }
\`
"
`;

exports[`in typescript mode creates a single word sdl file with CRUD actions 1`] = `
"export const schema = gql\`
  type Post {
    id: Int!
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  type Query {
    posts: [Post!]! @skipAuth
    post(id: Int!): Post @skipAuth
  }

  input CreatePostInput {
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    postedAt: DateTime
  }

  input UpdatePostInput {
    title: String
    slug: String
    author: String
    body: String
    image: String
    postedAt: DateTime
  }

  type Mutation {
    createPost(input: CreatePostInput!): Post! @skipAuth
    updatePost(id: Int!, input: UpdatePostInput!): Post! @skipAuth
    deletePost(id: Int!): Post! @skipAuth
  }
\`
"
`;
